org: <MY_SERVERLESS_ORG> # Sign up on https://serverless.com/dashboard/ if you don't already have a tenant
app: <APP_NAME> # create/add app on dashboard.serverless.com
service: post-api

plugins:
  - serverless-webpack

custom:
  config: ${file(../../serverless.config.json)}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.config.stage}
  region: us-east-1 # due to a bug, region value cannot come from a variable
  profile: ${self:custom.config.awsProfile}
  environment:
    STAGE: ${self:custom.config.stage} # stage is needed in the javascript code
    POST_TABLE_NAME: ${self:custom.config.appName}-${self:custom.config.stage}-postTable
    TAG_TABLE_NAME: ${self:custom.config.appName}-${self:custom.config.stage}-tagTable

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - 'Fn::ImportValue': ${self:custom.config.appName}-${self:custom.config.stage}-ExtPostTableArn
        - 'Fn::ImportValue': ${self:custom.config.appName}-${self:custom.config.stage}-ExtTagTableArn

functions:
  auth:
    handler: src/handler.authHandler
  graphql:
    handler: src/handler.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          authorizer: auth
          cors:
            origins: ${self:custom.config.endpoints.${self:custom.config.stage}} # Conditional endpoints depending on stage
            allowCredentials: true
      - http:
          path: graphql
          method: get
          authorizer: auth
          cors:
            origins: ${self:custom.config.endpoints.${self:custom.config.stage}} # Conditional endpoints depending on stage
            allowCredentials: true

resources:
  Resources:
    GatewayResponse: # Allowing cors for unsuccessful requests. see: https://github.com/serverless/serverless/issues/3896#issuecomment-326721971
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
  Outputs:
    ApiGatewayApiId: # Allow other services to use the same api gateway endpoint
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.config.appName}-${self:custom.config.stage}-ExtApiGatewayApiId

    ApiGatewayApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:custom.config.appName}-${self:custom.config.stage}-ExtApiGatewayApiRootResourceId
