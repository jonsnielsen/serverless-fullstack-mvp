service: postapp-user-pool

custom:
  common: ${file(../../serverless.common.yml):common}

provider:
  name: aws
  stage: ${self:custom.common.stage}
  profile: ${self:custom.common.awsProfile}
  region: us-east-1

resources:
  Resources:
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.common.stage}-${self:custom.common.appName} # Default domain
        UserPoolId:
          Ref: CognitoUserPool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.common.appName}-${self:custom.common.stage}-user-pool # Generate a name based on the stage
        # Set email as an alias
        AliasAttributes:
          - email
          - preferred_username # preferred username can only be set after user verification. Do that programatically behind the scenes
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
        Schema:
          - Mutable: false
            Name: name
            Required: true
          - Mutable: true
            Name: email
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.common.appName}-${self:custom.common.stage}-user-pool-client # Generate an app client name based on the stage
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient

    UserPoolArn:
      Value:
        Fn::GetAtt: CognitoUserPool.Arn
      Export:
        Name: ${self:custom.common.appName}-${self:custom.common.stage}-ExtUserPoolArn